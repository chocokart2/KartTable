Destroy(this) 함수는 호출자의 부모 클래스도 제거하는가? 아니면 메모리에 계속 눌러앉는가?


어떤 Scene에 존재하는 한 게임오브젝트는 CatGun 컴포넌트를 가지고 있습니다.
게임을 실행하고, K 버튼을 누르면 CatGun 컴포넌트는 사라집니다.
그리고 CatGun의 부모 컴포넌트 GunBase는
[S 버튼을 누르면 문자열"발사"가 출력되는 메소드]를 가지고 있습니다.
여기서 : K 버튼을 누르고, S 버튼을 누르면 문자열 "발사"가 출력될까요?

===== 실험 설계 =====
- GunBase
CatGun의 부모 클래스, 실험용 클래스이다.
- CatGun
GunBase의 파생 클래스, Destroy 함수를 호출할 것이다.
- Inventory
GunBase의 객체(인스턴스)를 멤버 변수로 가질 클래스이다.
객체가 제대로 사라졌는지 확인하기 위해서이다.

===== 과정 =====
- 실행한다
DEBUG_Inventory.Start() : 제대로 시작됨
- S를 누른다
DEBUG.GunBase() : 함수가 호출되었습니다!
- K를 누른다
DEBUG_CatGun.Update() : Destroy 함수가 호출되었습니다!
- S를 누른다
(아무 로그도 뜨지 않음)
- D를 누른다
DEBUG_Inventory.CheckGunBase() : 이 함수는 myGun이 null입니다.

===== 결론 =====
Destroy 함수는 부모 함수에게도 소멸자를 호출한다.

===== GunBase.cs =====
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GunBase : MonoBehaviour
{
    protected void SayShoot()
    {
        if (Input.GetKeyDown(KeyCode.S))
        {
            Debug.Log("DEBUG.GunBase() : 함수가 호출되었습니다!");
        }
    }

    // Update is called once per frame
    void Update()
    {
        SayShoot();
    }
}
===== CatGun.cs =====
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CatGun : GunBase
{
    // Update is called once per frame
    void Update()
    {
        SayShoot();

        if (Input.GetKeyDown(KeyCode.K))
        {
            Debug.Log("DEBUG_CatGun.Update() : Destroy 함수가 호출되었습니다!");

            Destroy(this);
        }
    }
}
===== Inventory.cs =====
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Inventory : MonoBehaviour
{
    GunBase myGun;

    void CheckGunBase()
    {
        if (Input.GetKeyDown(KeyCode.D))
        {
            if(myGun == null)
            {
                Debug.Log("DEBUG_Inventory.CheckGunBase() : 이 함수는 myGun이 null입니다.");
            }
        }
    }

    // Start is called before the first frame update
    void Start()
    {
        if((myGun = GetComponent<CatGun>()) == null)
        {
            Debug.Log("DEBUG_Inventory.Start() : 컴포넌트를 찾을 수 없습니다.");
        }
        else
        {
            Debug.Log("DEBUG_Inventory.Start() : 제대로 시작됨");
        }

    }

    private void Update()
    {
        CheckGunBase();
    }
}